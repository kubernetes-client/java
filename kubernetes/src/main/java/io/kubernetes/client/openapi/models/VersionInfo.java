/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.34
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.openapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Info contains versioning information. how we&#39;ll want to distribute that information.
 */
@ApiModel(description = "Info contains versioning information. how we'll want to distribute that information.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-12T23:11:52.603861Z[Etc/UTC]")
public class VersionInfo {
  public static final String SERIALIZED_NAME_BUILD_DATE = "buildDate";
  @SerializedName(SERIALIZED_NAME_BUILD_DATE)
  private String buildDate;

  public static final String SERIALIZED_NAME_COMPILER = "compiler";
  @SerializedName(SERIALIZED_NAME_COMPILER)
  private String compiler;

  public static final String SERIALIZED_NAME_EMULATION_MAJOR = "emulationMajor";
  @SerializedName(SERIALIZED_NAME_EMULATION_MAJOR)
  private String emulationMajor;

  public static final String SERIALIZED_NAME_EMULATION_MINOR = "emulationMinor";
  @SerializedName(SERIALIZED_NAME_EMULATION_MINOR)
  private String emulationMinor;

  public static final String SERIALIZED_NAME_GIT_COMMIT = "gitCommit";
  @SerializedName(SERIALIZED_NAME_GIT_COMMIT)
  private String gitCommit;

  public static final String SERIALIZED_NAME_GIT_TREE_STATE = "gitTreeState";
  @SerializedName(SERIALIZED_NAME_GIT_TREE_STATE)
  private String gitTreeState;

  public static final String SERIALIZED_NAME_GIT_VERSION = "gitVersion";
  @SerializedName(SERIALIZED_NAME_GIT_VERSION)
  private String gitVersion;

  public static final String SERIALIZED_NAME_GO_VERSION = "goVersion";
  @SerializedName(SERIALIZED_NAME_GO_VERSION)
  private String goVersion;

  public static final String SERIALIZED_NAME_MAJOR = "major";
  @SerializedName(SERIALIZED_NAME_MAJOR)
  private String major;

  public static final String SERIALIZED_NAME_MIN_COMPATIBILITY_MAJOR = "minCompatibilityMajor";
  @SerializedName(SERIALIZED_NAME_MIN_COMPATIBILITY_MAJOR)
  private String minCompatibilityMajor;

  public static final String SERIALIZED_NAME_MIN_COMPATIBILITY_MINOR = "minCompatibilityMinor";
  @SerializedName(SERIALIZED_NAME_MIN_COMPATIBILITY_MINOR)
  private String minCompatibilityMinor;

  public static final String SERIALIZED_NAME_MINOR = "minor";
  @SerializedName(SERIALIZED_NAME_MINOR)
  private String minor;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;


  public VersionInfo buildDate(String buildDate) {
    
    this.buildDate = buildDate;
    return this;
  }

   /**
   * Get buildDate
   * @return buildDate
  **/
  @ApiModelProperty(required = true, value = "")

  public String getBuildDate() {
    return buildDate;
  }


  public void setBuildDate(String buildDate) {
    this.buildDate = buildDate;
  }


  public VersionInfo compiler(String compiler) {
    
    this.compiler = compiler;
    return this;
  }

   /**
   * Get compiler
   * @return compiler
  **/
  @ApiModelProperty(required = true, value = "")

  public String getCompiler() {
    return compiler;
  }


  public void setCompiler(String compiler) {
    this.compiler = compiler;
  }


  public VersionInfo emulationMajor(String emulationMajor) {
    
    this.emulationMajor = emulationMajor;
    return this;
  }

   /**
   * EmulationMajor is the major version of the emulation version
   * @return emulationMajor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EmulationMajor is the major version of the emulation version")

  public String getEmulationMajor() {
    return emulationMajor;
  }


  public void setEmulationMajor(String emulationMajor) {
    this.emulationMajor = emulationMajor;
  }


  public VersionInfo emulationMinor(String emulationMinor) {
    
    this.emulationMinor = emulationMinor;
    return this;
  }

   /**
   * EmulationMinor is the minor version of the emulation version
   * @return emulationMinor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EmulationMinor is the minor version of the emulation version")

  public String getEmulationMinor() {
    return emulationMinor;
  }


  public void setEmulationMinor(String emulationMinor) {
    this.emulationMinor = emulationMinor;
  }


  public VersionInfo gitCommit(String gitCommit) {
    
    this.gitCommit = gitCommit;
    return this;
  }

   /**
   * Get gitCommit
   * @return gitCommit
  **/
  @ApiModelProperty(required = true, value = "")

  public String getGitCommit() {
    return gitCommit;
  }


  public void setGitCommit(String gitCommit) {
    this.gitCommit = gitCommit;
  }


  public VersionInfo gitTreeState(String gitTreeState) {
    
    this.gitTreeState = gitTreeState;
    return this;
  }

   /**
   * Get gitTreeState
   * @return gitTreeState
  **/
  @ApiModelProperty(required = true, value = "")

  public String getGitTreeState() {
    return gitTreeState;
  }


  public void setGitTreeState(String gitTreeState) {
    this.gitTreeState = gitTreeState;
  }


  public VersionInfo gitVersion(String gitVersion) {
    
    this.gitVersion = gitVersion;
    return this;
  }

   /**
   * Get gitVersion
   * @return gitVersion
  **/
  @ApiModelProperty(required = true, value = "")

  public String getGitVersion() {
    return gitVersion;
  }


  public void setGitVersion(String gitVersion) {
    this.gitVersion = gitVersion;
  }


  public VersionInfo goVersion(String goVersion) {
    
    this.goVersion = goVersion;
    return this;
  }

   /**
   * Get goVersion
   * @return goVersion
  **/
  @ApiModelProperty(required = true, value = "")

  public String getGoVersion() {
    return goVersion;
  }


  public void setGoVersion(String goVersion) {
    this.goVersion = goVersion;
  }


  public VersionInfo major(String major) {
    
    this.major = major;
    return this;
  }

   /**
   * Major is the major version of the binary version
   * @return major
  **/
  @ApiModelProperty(required = true, value = "Major is the major version of the binary version")

  public String getMajor() {
    return major;
  }


  public void setMajor(String major) {
    this.major = major;
  }


  public VersionInfo minCompatibilityMajor(String minCompatibilityMajor) {
    
    this.minCompatibilityMajor = minCompatibilityMajor;
    return this;
  }

   /**
   * MinCompatibilityMajor is the major version of the minimum compatibility version
   * @return minCompatibilityMajor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MinCompatibilityMajor is the major version of the minimum compatibility version")

  public String getMinCompatibilityMajor() {
    return minCompatibilityMajor;
  }


  public void setMinCompatibilityMajor(String minCompatibilityMajor) {
    this.minCompatibilityMajor = minCompatibilityMajor;
  }


  public VersionInfo minCompatibilityMinor(String minCompatibilityMinor) {
    
    this.minCompatibilityMinor = minCompatibilityMinor;
    return this;
  }

   /**
   * MinCompatibilityMinor is the minor version of the minimum compatibility version
   * @return minCompatibilityMinor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MinCompatibilityMinor is the minor version of the minimum compatibility version")

  public String getMinCompatibilityMinor() {
    return minCompatibilityMinor;
  }


  public void setMinCompatibilityMinor(String minCompatibilityMinor) {
    this.minCompatibilityMinor = minCompatibilityMinor;
  }


  public VersionInfo minor(String minor) {
    
    this.minor = minor;
    return this;
  }

   /**
   * Minor is the minor version of the binary version
   * @return minor
  **/
  @ApiModelProperty(required = true, value = "Minor is the minor version of the binary version")

  public String getMinor() {
    return minor;
  }


  public void setMinor(String minor) {
    this.minor = minor;
  }


  public VersionInfo platform(String platform) {
    
    this.platform = platform;
    return this;
  }

   /**
   * Get platform
   * @return platform
  **/
  @ApiModelProperty(required = true, value = "")

  public String getPlatform() {
    return platform;
  }


  public void setPlatform(String platform) {
    this.platform = platform;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionInfo versionInfo = (VersionInfo) o;
    return Objects.equals(this.buildDate, versionInfo.buildDate) &&
        Objects.equals(this.compiler, versionInfo.compiler) &&
        Objects.equals(this.emulationMajor, versionInfo.emulationMajor) &&
        Objects.equals(this.emulationMinor, versionInfo.emulationMinor) &&
        Objects.equals(this.gitCommit, versionInfo.gitCommit) &&
        Objects.equals(this.gitTreeState, versionInfo.gitTreeState) &&
        Objects.equals(this.gitVersion, versionInfo.gitVersion) &&
        Objects.equals(this.goVersion, versionInfo.goVersion) &&
        Objects.equals(this.major, versionInfo.major) &&
        Objects.equals(this.minCompatibilityMajor, versionInfo.minCompatibilityMajor) &&
        Objects.equals(this.minCompatibilityMinor, versionInfo.minCompatibilityMinor) &&
        Objects.equals(this.minor, versionInfo.minor) &&
        Objects.equals(this.platform, versionInfo.platform);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildDate, compiler, emulationMajor, emulationMinor, gitCommit, gitTreeState, gitVersion, goVersion, major, minCompatibilityMajor, minCompatibilityMinor, minor, platform);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionInfo {\n");
    sb.append("    buildDate: ").append(toIndentedString(buildDate)).append("\n");
    sb.append("    compiler: ").append(toIndentedString(compiler)).append("\n");
    sb.append("    emulationMajor: ").append(toIndentedString(emulationMajor)).append("\n");
    sb.append("    emulationMinor: ").append(toIndentedString(emulationMinor)).append("\n");
    sb.append("    gitCommit: ").append(toIndentedString(gitCommit)).append("\n");
    sb.append("    gitTreeState: ").append(toIndentedString(gitTreeState)).append("\n");
    sb.append("    gitVersion: ").append(toIndentedString(gitVersion)).append("\n");
    sb.append("    goVersion: ").append(toIndentedString(goVersion)).append("\n");
    sb.append("    major: ").append(toIndentedString(major)).append("\n");
    sb.append("    minCompatibilityMajor: ").append(toIndentedString(minCompatibilityMajor)).append("\n");
    sb.append("    minCompatibilityMinor: ").append(toIndentedString(minCompatibilityMinor)).append("\n");
    sb.append("    minor: ").append(toIndentedString(minor)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

